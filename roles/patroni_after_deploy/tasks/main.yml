---

# Patroni configure
- name: Create conf directory
  file:
    path: /etc/patroni
    state: directory
    owner: postgres
    group: postgres
    mode: 0750
  tags: patroni_conf

- name: Generate conf file "/etc/patroni/patroni.yml"
  template:
    src: templates/patroni.yml.j2
    dest: /etc/patroni/patroni.yml
    owner: postgres
    group: postgres
    mode: 0640
  register: generate_patroni_yml
  tags: patroni_conf

- name: Create patroni log directory
  file:
    path: "{{ patroni_log_dir }}"
    owner: postgres
    group: postgres
    state: directory
    mode: 0750
  when: patroni_log_destination == 'logfile'
  tags: patroni_conf

- name: Copy systemd service file "/etc/systemd/system/patroni.service"
  template:
    src: templates/patroni.service.j2
    dest: /etc/systemd/system/patroni.service
    owner: postgres
    group: postgres
    mode: 0644
  tags: patroni_conf, patroni_service

- name: Prepare PostgreSQL | create statistics directory (if not already exists)
  file:
    path: "{{ postgresql_stats_temp_directory_path }}"
    state: directory
    mode: 01777
  when:
    - postgresql_stats_temp_directory_path is defined
    - postgresql_stats_temp_directory_path != 'none'
  tags: patroni_conf, pgsql_stats_tmp

- name: Prepare PostgreSQL | mount the statistics directory in memory (tmpfs)
  mount:
    path: "{{ postgresql_stats_temp_directory_path }}"
    src: tmpfs
    fstype: tmpfs
    opts: "size={{ postgresql_stats_temp_directory_size }},uid=postgres,gid=postgres"
    state: mounted
  when:
    - postgresql_stats_temp_directory_path is defined
    - postgresql_stats_temp_directory_path != 'none'
  tags: patroni_conf, pgsql_stats_tmp

- name: Prepare PostgreSQL | make sure the postgresql log directory "{{ postgresql_log_dir }}" exists
  file:
    path: "{{ postgresql_log_dir }}"
    owner: postgres
    group: postgres
    state: directory
    mode: 0700
  tags: patroni_conf

- block:  # pg_hba (using a templates/pg_hba.conf.j2)
    - name: Prepare PostgreSQL | generate pg_hba.conf
      template:
        src: templates/pg_hba.conf.j2
        dest: "{{ postgresql_conf_dir }}/pg_hba.conf"
        owner: postgres
        group: postgres
        mode: 0640
      register: generate_pg_hba

    - name: Prepare PostgreSQL | reload for apply the pg_hba.conf
      become: true
      become_user: postgres
      command: "{{ postgresql_bin_dir }}/psql -p {{ postgresql_port }} -c 'SELECT pg_reload_conf()'"
      register: psql_reload_result
      changed_when: psql_reload_result.rc == 0
      failed_when: false  # exec pg_reload_conf on all running postgres (to re-run with --tag pg_hba).
      when: generate_pg_hba is changed
  tags: patroni_conf, pg_hba, pg_hba_generate

- block:
    - name: Config postgresql parameters in DCS
      uri:
        url: http://{{ hostvars[inventory_hostname]['inventory_hostname'] }}:8008/config
        method: PATCH
        body: '{"postgresql":{"parameters":{"{{ item.option }}":"{{ item.value }}"}}}'
        body_format: json
      loop: "{{postgresql_parameters}}"
      when: item.value != "null"

    - name: Delete postgresql parameters from DCS
      uri:
        url: http://{{ hostvars[inventory_hostname]['inventory_hostname'] }}:8008/config
        method: PATCH
        body: '{"postgresql":{"parameters":{"{{ item.option }}":null}}}'
        body_format: json
      loop: "{{postgresql_parameters}}"
      when: item.value == "null"
  when: is_master == "true"
  tags: patroni_conf

- name: Delete postgresql parameters from "/etc/patroni/patroni.yml"
  lineinfile:
    path: /etc/patroni/patroni.yml
    regexp: '^.*{{ item.option }}: {{ item.value }}$'
    state: absent
  loop: "{{postgresql_parameters}}"
  tags: patroni_conf
  when: item.value == "null"

- block:  # reload patroni on all servers
    - name: Reload patroni service on all servers
      systemd:
        daemon_reload: true
        name: patroni
        state: reloaded
        enabled: true
      when: generate_patroni_yml is changed

    - name: Wait for port 8008 to become open on the host
      wait_for:
        port: 8008
        host: "{{ hostvars[inventory_hostname]['inventory_hostname'] }}"
        state: started
        timeout: 120
        delay: 10
      ignore_errors: false

    - name: Check that the patroni is healthy on the replica server
      uri:
        url: "http://{{ hostvars[inventory_hostname]['inventory_hostname'] }}:8008/health"
        status_code: 200
      register: replica_result
      until: replica_result.status == 200
      retries: 1200  # timeout 10 hours
      delay: 30
  tags: patroni_conf, patroni_reload

# disable postgresql from autostart
- block:  # "Debian"
    - name: Turning off postgresql autostart from config "start.conf" (will be managed by patroni)
      copy:
        dest: "{{ postgresql_conf_dir }}/start.conf"
        content: "manual"
        owner: postgres
        group: postgres
        mode: 0644

    - name: Disable "postgresql@{{ postgresql_version }}-{{ postgresql_cluster_name }}" service
      systemd:
        name: "postgresql@{{ postgresql_version }}-{{ postgresql_cluster_name }}"
        enabled: false
        daemon_reload: true
  when: ansible_os_family == "Debian" and
        postgresql_packages|join(" ") is not search("postgrespro")
  tags: patroni_conf, postgresql_disable

# "RedHat"
- name: Disable "postgresql-{{ postgresql_version }}" service (will be managed by patroni)
  systemd:
    name: "postgresql-{{ postgresql_version }}"
    enabled: false
    daemon_reload: true
  when: ansible_os_family == "RedHat" and
        postgresql_packages|join(" ") is not search("postgrespro")
  tags: patroni_conf, postgresql_disable

# PostgresPro
- name: Disable "postgrespro-std-{{ postgresql_version }}" service (will be managed by patroni)
  systemd:
    name: "postgrespro-std-{{ postgresql_version }}"
    enabled: false
    daemon_reload: true
  when: postgresql_packages|join(" ") is search("postgrespro-std")
  tags: patroni_conf, postgresql_disable

# PATRONICTL_CONFIG_FILE (patroni v1.6.1 and higher)
- name: Add PATRONICTL_CONFIG_FILE environment variable into /etc/environment
  lineinfile:
    dest: "/etc/environment"
    state: present
    regexp: "^export PATRONICTL_CONFIG_FILE"
    line: "export PATRONICTL_CONFIG_FILE=/etc/patroni/patroni.yml"
    owner: root
    group: root
    mode: '0644'
  ignore_errors: true
  tags: patroni_conf, patroni_env

...
